const isLocalhost=Boolean(window.location.hostname==="localhost"||window.location.hostname==="[::1]"||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));const register=publicUrl=>{if("serviceWorker"in navigator){const url=new URL(publicUrl,window.location);if(url.origin!==window.location.origin){return}window.addEventListener("load",(()=>{const swUrl=`${publicUrl}/service-worker.js`;if(isLocalhost){checkValidServiceWorker(swUrl)}else{registerValidSW(swUrl)}}))}};const registerValidSW=swUrl=>{navigator.serviceWorker.register(swUrl).then((registration=>{registration.onupdatefound=()=>{const installingWorker=registration.installing;installingWorker.onstatechange=()=>{if(installingWorker.state==="installed"){if(navigator.serviceWorker.controller){console.log("New content is available; Reloading...");window.location.reload(true)}else{console.log("Content is cached for offline use.")}}}}})).catch((error=>{console.error("Error during service worker registration:",error)}))};const checkValidServiceWorker=swUrl=>{fetch(swUrl).then((response=>{if(response.status===404||response.headers.get("content-type").indexOf("javascript")===-1){navigator.serviceWorker.ready.then((registration=>{registration.unregister().then((()=>{window.location.reload()}))}))}else{registerValidSW(swUrl)}})).catch((()=>{console.log("No internet connection found. App is running in offline mode.")}))};export const unregister=()=>{if("serviceWorker"in navigator){navigator.serviceWorker.ready.then((registration=>{registration.unregister()}))}};export default register;